#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import os
import samba
import cluster.userdomains


agent.set_weight(os.path.basename(__file__), 0) # Validation step, no task progress at all

request = json.load(sys.stdin)

original_environment = request['environment']
ipaddress = original_environment['IPADDRESS']
realm = original_environment['REALM']

try:
    # This is a disaster recovery: restore on the same node/ip address!
    samba.ipaddress_check(ipaddress)
except samba.IpNotPrivate:
    agent.set_status('validation-failed')
    json.dump([{"field":"ipaddress","parameter":"ipaddress","value": ipaddress,"error":"ipaddress_private_check_failed"}], fp=sys.stdout)
    sys.exit(2)
except samba.IpNotAvailable:
    agent.set_status('validation-failed')
    json.dump([{"field":"ipaddress","parameter":"ipaddress","value": ipaddress,"error":"ipaddress_avail_check_failed"}], fp=sys.stdout)
    sys.exit(3)
except samba.IpBindError as ex:
    print(ex, file=sys.stderr)
    agent.set_status('validation-failed')
    json.dump([{"field":"ipaddress","parameter":"ipaddress","value": ex.ipaddr,"error":"ipaddress_bind_check_failed"}], fp=sys.stdout)
    sys.exit(4)

rdb = agent.redis_connect(host='127.0.0.1')

domains = cluster.userdomains.get_internal_domains(rdb) | cluster.userdomains.get_external_domains(rdb)
if realm in domains:
    # This is a disaster recovery: the domain must not exist!
    agent.set_status('validation-failed')
    json.dump([{'field':'realm', 'parameter':'realm','value': realm, 'error':'domain_already_exists'}], fp=sys.stdout)
    sys.exit(5)
